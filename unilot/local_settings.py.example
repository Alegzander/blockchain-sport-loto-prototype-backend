import os


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = None

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True # False if production

ALLOWED_HOSTS = [ ]

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'your-pg-db-name',
        'USER': 'yout-pg-username',
        'PASSWORD': 'your-pg-password',
        'HOST': 'your-pg-db-host',
        # 'PORT': 'your-pg-db-host', #If required
    }
}

WEB3_CONFIG = {
    # 'MODE': 'IPC', # Or RPC
    # 'HOST': 'rpc-ip-address-or-host', # If mode is RPC
    # 'PORT': 'rpc-port', # If mode is RPC
    # 'PATH': 'path/to/ipc/socket.sock', # If mode is IPC
    # 'IS_TESTNET': True, # or False if live network
    # 'ETHBASE': '0x0000000000000000000000000000000000000000', # Account that will run all transactions
    # 'ETHBASE_PWD': 'ethereum-coinbase-secure-password', # Password to unlock it
    # 'GAS_PRICE': (25, 'gwei'),
    # 'CALCULATOR_CONTRACT_ADDRESS': '0x0000000000000000000000000000000000000000', # Address of deployed calculator contract
}

PUSH_NOTIFICATIONS_SETTINGS = {
        # See details at https://github.com/jleclanche/django-push-notifications
}

COINBASE_CONFIG = {
    'API_KEY': 'coinbase-api-key',
    'API_SECRET': 'coinbase-api-secret',
    'API_VERSION': 'coinbase-api-version'
}

DJANGO_TELEGRAMBOT = {
    'MODE' : 'WEBHOOK', #(Optional [str]) # The default value is WEBHOOK,
                        # otherwise you may use 'POLLING'
                        # NB: if use polling you must provide to run
                        # a management command that starts a worker

    'WEBHOOK_SITE' : 'https://mywebsite.com',
    'WEBHOOK_PREFIX' : '/tg', # (Optional[str]) # If this value is specified,
                                  # a prefix is added to webhook url

    #'WEBHOOK_CERTIFICATE' : 'cert.pem', # If your site use self-signed
                         #certificate, must be set with location of your public key
                         #certificate.(More info at https://core.telegram.org/bots/self-signed )

    'BOTS' : [
        {
           'TOKEN': '123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11', #Your bot token.

           #'ALLOWED_UPDATES':(Optional[list[str]]), # List the types of
                                                   #updates you want your bot to receive. For example, specify
                                                   #``["message", "edited_channel_post", "callback_query"]`` to
                                                   #only receive updates of these types. See ``telegram.Update``
                                                   #for a complete list of available update types.
                                                   #Specify an empty list to receive all updates regardless of type
                                                   #(default). If not specified, the previous setting will be used.
                                                   #Please note that this parameter doesn't affect updates created
                                                   #before the call to the setWebhook, so unwanted updates may be
                                                   #received for a short period of time.

           #'TIMEOUT':(Optional[int|float]), # If this value is specified,
                                   #use it as the read timeout from the server

           #'WEBHOOK_MAX_CONNECTIONS':(Optional[int]), # Maximum allowed number of
                                   #simultaneous HTTPS connections to the webhook for update
                                   #delivery, 1-100. Defaults to 40. Use lower values to limit the
                                   #load on your bot's server, and higher values to increase your
                                   #bot's throughput.

           #'POLL_INTERVAL' : (Optional[float]), # Time to wait between polling updates from Telegram in
                           #seconds. Default is 0.0

           #'POLL_CLEAN':(Optional[bool]), # Whether to clean any pending updates on Telegram servers before
                                   #actually starting to poll. Default is False.

           #'POLL_BOOTSTRAP_RETRIES':(Optional[int]), # Whether the bootstrapping phase of the `Updater`
                                   #will retry on failures on the Telegram server.
                                   #|   < 0 - retry indefinitely
                                   #|     0 - no retries (default)
                                   #|   > 0 - retry up to X times

           #'POLL_READ_LATENCY':(Optional[float|int]), # Grace time in seconds for receiving the reply from
                                   #server. Will be added to the `timeout` value and used as the read timeout from
                           #server (Default: 2).
        },
        #Other bots here with same structure.
    ],
}

MAILCHIMP_API_KEY = 'mailchimp-api-key'
MAILCHIMP_LOGIN = 'mailchimp-login'

CORS_ORIGIN_ALLOW_ALL=False
